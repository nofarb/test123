name: Full Storage Pipeline â€“ Cache, Individual Artifacts, Package

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ImageMagick (for PDF generation)
        run: sudo apt-get update && sudo apt-get install -y imagemagick

      - name: Set up directories
        run: |
          mkdir -p ~/.cache/build-cache/
          mkdir -p ./artifacts/output/
          mkdir -p ./src/

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/build-cache
          key: build-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-cache-${{ runner.os }}-

      - name: Simulate build and generate files
        run: |
          echo "Generating cacheable files..."
          dd if=/dev/urandom bs=1M count=7 status=none | base64 > ~/.cache/build-cache/main.pyc
          dd if=/dev/urandom bs=1M count=8 status=none | base64 > ~/.cache/build-cache/build.meta

          echo "Generating artifact files..."
          dd if=/dev/urandom bs=100M count=5 status=none | base64 > ./artifacts/output/release.txt
          dd if=/dev/urandom bs=20M count=9 status=none | base64 > ./artifacts/output/app.zip

          echo "Creating PDF (xxx.pdf)..."
          convert -size 600x100 xc:white -gravity center -pointsize 20 -annotate 0 "This is a test PDF" ./artifacts/output/xxx.pdf

          echo "Creating CSS (ccc.css)..."
          echo "body { background-color: #f0f0f0; }" > ./artifacts/output/ccc.css

          echo "Creating HTML (rrrr.html)..."
          cat <<EOF > ./artifacts/output/rrrr.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test Report</title>
            <link rel="stylesheet" href="ccc.css">
          </head>
          <body>
            <h1>Test Results</h1>
            <p>All tests passed âœ…</p>
          </body>
          </html>
          EOF

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/build-cache
          key: build-cache-${{ runner.os }}-${{ github.sha }}

      # ðŸŽ¯ Upload artifacts individually so they appear separately in the UI
      - name: Upload artifact â€“ xxx.pdf
        uses: actions/upload-artifact@v4
        with:
          name: xxx.pdf
          path: ./artifacts/output/xxx.pdf

      - name: Upload artifact â€“ ccc.css
        uses: actions/upload-artifact@v4
        with:
          name: ccc.css
          path: ./artifacts/output/ccc.css

      - name: Upload artifact â€“ rrrr.html
        uses: actions/upload-artifact@v4
        with:
          name: rrrr.html
          path: ./artifacts/output/rrrr.html

      - name: Upload artifact â€“ release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release.txt
          path: ./artifacts/output/release.txt

      - name: Upload artifact â€“ app.zip
        uses: actions/upload-artifact@v4
        with:
          name: app.zip
          path: ./artifacts/output/app.zip

      # ðŸ“¦ Also publish app.zip as a GitHub Release asset
      - name: Publish app.zip as GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: simulated-release-${{ github.run_number }}
          name: Simulated Release ${{ github.run_number }}
          files: ./artifacts/output/app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
